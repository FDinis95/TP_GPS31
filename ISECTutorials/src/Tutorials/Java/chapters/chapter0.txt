Introduction

The new Java versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere.
Java is −
    Object Oriented − In Java, everything is an Object. Java can be easily extended since it is based on the Object model.
    Platform Independent − Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Java Virtual Machine (JVM) on whichever platform it is being run on.
    Simple − Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.
    Secure − With Java's secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.
    Architecture-neutral − Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.
    Portable − Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.
    Robust − Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.
    Multithreaded − With Java's multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.
    Interpreted − Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.
    High Performance − With the use of Just-In-Time compilers, Java enables high performance.
    Distributed − Java is designed for the distributed environment of the internet.
    Dynamic − Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.

History of Java
    James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called ‘Oak’ after an oak tree that stood outside Gosling's office, also went by the name ‘Green’ and ended up later being renamed as Java, from a list of random words.
    
    Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms.
    
    On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).
    
    On 8 May, 2007, Sun finished the process, making all of Java's core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.

When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what do class, object, methods, and instance variables mean.
    Object − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.
    Class − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.
    Methods − A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.
    Instance Variables − Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.

Basic Syntax
About Java programs, it is very important to keep in mind the following points.
    Case Sensitivity − Java is case sensitive, which means identifier Hello and hello would have different meaning in Java.
    Class Names − For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word's first letter should be in Upper Case.
        Example: class MyFirstJavaClass
    Method Names − All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word's first letter should be in Upper Case.
        Example: public void myMethodName()
    Program File Name − Name of the program file should exactly match the class name.
    When saving the file, you should save it using the class name (Remember Java is case sensitive) and append '.java' to the end of the name (if the file name and the class name do not match, your program will not compile).
        Example: Assume 'MyFirstJavaProgram' is the class name. Then the file should be saved as 'MyFirstJavaProgram.java'
    public static void main(String args[]) − Java program processing starts from the main() method which is a mandatory part of every Java program.
    
Java Identifiers

    All Java components require names. Names used for classes, variables, and methods are called identifiers.
    In Java, there are several points to remember about identifiers. They are as follows −
        All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).
        After the first character, identifiers can have any combination of characters.
        A keyword cannot be used as an identifier.
        Most importantly, identifiers are case sensitive.
        Examples of legal identifiers: age, $salary, _value, __1_value.
        Examples of illegal identifiers: 123abc, -salary.

Java Modifiers

Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers −
    Access Modifiers − default, public , protected, private
    Non-access Modifiers − final, abstract, strictfp
We will be looking into more details about modifiers in the next section.

Java Variables
Following are the types of variables in Java −
    Local Variables
    Class Variables (Static Variables)
    Instance Variables (Non-static Variables)

Java Arrays
    Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.
