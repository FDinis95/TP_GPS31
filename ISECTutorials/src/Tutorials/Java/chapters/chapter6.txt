Methods

A Java method is a collection of statements that are grouped together to perform an operation. When you call the System.out.println() method, for example, the system actually executes several statements in order to display a message on the console.
Now you will learn how to create your own methods with or without return values, invoke a method with or without parameters, and apply method abstraction in the program design.
Creating Method
Considering the following example to explain the syntax of a method −
Syntax
public static int methodName(int a, int b) {
   // body
}


Here,
    public static − modifier
    int − return type
    methodName − name of the method
    a, b − formal parameters
    int a, int b − list of parameters
Method definition consists of a method header and a method body. The same is shown in the following syntax:
Syntax
modifier returnType nameOfMethod (Parameter List) {
   // method body
}

The syntax shown above includes:
    modifier − It defines the access type of the method and it is optional to use.
    returnType − Method may return a value.
    nameOfMethod − This is the method name. The method signature consists of the method name and the parameter list.
    Parameter List − The list of parameters, it is the type, order, and number of parameters of a method. These are optional, method may contain zero parameters.
    method body − The method body defines what the method does with the statements.
Example
Here is the source code of the above defined method called min(). This method takes two parameters num1 and num2 and returns the maximum between the two −
/** the snippet returns the minimum between two numbers */

public static int minFunction(int n1, int n2) {
   int min;
   if (n1 > n2)
      min = n2;
   else
      min = n1;

   return min; 
}

Method Calling

For using a method, it should be called. There are two ways in which a method is called i.e., method returns a value or returning nothing (no return value).

The process of method calling is simple. When a program invokes a method, the program control gets transferred to the called method. This called method then returns control to the caller in two conditions, when −
    the return statement is executed.
    it reaches the method ending closing brace.

The methods returning void is considered as call to a statement. Lets consider an example −
System.out.println("This is tutorialspoint.com!");
The method returning value can be understood by the following example −
int result = sum(6, 9);
Following is the example to demonstrate how to define a method and how to call it −

Example
public class ExampleMinNumber {
   
   public static void main(String[] args) {
      int a = 11;
      int b = 6;
      int c = minFunction(a, b);
      System.out.println("Minimum Value = " + c);
   }

   /** returns the minimum of two numbers */
   public static int minFunction(int n1, int n2) {
      int min;
      if (n1 > n2)
         min = n2;
      else
         min = n1;

      return min; 
   }
}
This will produce the following result −
Output
Minimum value = 6


Methods of the Matcher Class
Here is a list of useful instance methods:

Index Methods
Index methods provide useful index values that show precisely where the match was found in the input string −

Sr.No.	Method & Description
1	
public int start()

Returns the start index of the previous match.

2	
public int start(int group)

Returns the start index of the subsequence captured by the given group during the previous match operation.

3	
public int end()

Returns the offset after the last character matched.

4	
public int end(int group)

Returns the offset after the last character of the subsequence captured by the given group during the previous match operation.

Study Methods
Study methods review the input string and return a Boolean indicating whether or not the pattern is found −

Sr.No.	Method & Description
1	
public boolean lookingAt()

Attempts to match the input sequence, starting at the beginning of the region, against the pattern.

2	
public boolean find()

Attempts to find the next subsequence of the input sequence that matches the pattern.

3	
public boolean find(int start)

Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index.

4	
public boolean matches()

Attempts to match the entire region against the pattern.

Replacement Methods
Replacement methods are useful methods for replacing text in an input string −

Sr.No.	Method & Description
1	
public Matcher appendReplacement(StringBuffer sb, String replacement)

Implements a non-terminal append-and-replace step.

2	
public StringBuffer appendTail(StringBuffer sb)

Implements a terminal append-and-replace step.

3	
public String replaceAll(String replacement)

Replaces every subsequence of the input sequence that matches the pattern with the given replacement string.

4	
public String replaceFirst(String replacement)

Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string.

5	
public static String quoteReplacement(String s)

Returns a literal replacement String for the specified String. This method produces a String that will work as a literal replacement s in the appendReplacement method of the Matcher class.